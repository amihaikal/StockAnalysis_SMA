# The code in this cell is used to import the packages throughout this notebook.
# The following are private packages available only during this simulation:
from AmplifyQuantTrading import Data
from AmplifyArbitrageTrading.TradingEngine import TradingEngine

# The following are publicly available packages:
from matplotlib import pyplot as plt
import pandas as pd
prices = Data.get_price_series("PricestoFeedserver")
backtest_prices = []
for price in prices: # Select the first ten prices in the data.
    if len(backtest_prices) <= 50 and price[0] == "AAPL":#Assuming the price [0] is the ticker
        backtest_prices.append(price)
for price in prices: # Select the first ten prices in the data.
# Converting the backtest_prices list into a Data Frame
prices_df = pd.DataFrame(backtest_prices, columns=["Ticker","Date","Price"])

#Set the Date column as the index
prices_df.set_index("Date",inplace=True)
prices_df.head()
# Calculate the 5-period rolling mean
prices_df['Rolling_Mean'] = prices_df['Price'].rolling(window=5).mean()

# Identify crossover and crossunder points
prices_df['Crossover'] = (prices_df['Price'] > prices_df['Rolling_Mean']) & (prices_df['Price'].shift(1) <= prices_df['Rolling_Mean'].shift(1))
prices_df['Crossunder'] = (prices_df['Price'] < prices_df['Rolling_Mean']) & (prices_df['Price'].shift(1) >= prices_df['Rolling_Mean'].shift(1))
prices_df.head(10)

# Iterate through the length of the prices_df day by day
for i in range(1, len(prices_df)):
    current_day = prices_df.iloc[i]
    previous_day = prices_df.iloc[i-1]

#if 'Crossover' and 'Crossunder'
if current_day['Crossover']:
     engine.execute_order(ticker="AAPL", volume=100, action="BUY", date=current_day.name)
elif current_day['Crossunder']:
    engine.execute_order(ticker="AAPL", volume=100, action="SELL", date=current_day.name)
engine.close_all_positions(prices_df.iloc[len(prices_df) - 1].name)

print(engine.current_positions['AAPL'])
axes = plt.subplot()

#Initialize the plot
fig,ax=plt.subplots(figsize=(10,6))
ax.plot(prices_df.index, prices_df['Price'], label='Price', marker='o')
ax.plot(prices_df.index, prices_df['Rolling_Mean'], label='Rolling Mean', linestyle='--')

for trade in engine.current_positions['AAPL'].trade_history:
    if trade['action'] == 'BUY':
        ax.scatter(trade['date'], trade['price'], color='green', label='Buy', marker='^', zorder=5)
    elif trade['action'] == 'SELL':
        ax.scatter(trade['date'], trade['price'], color='red', label='Sell', marker='v', zorder=5)
# Adding labels and legend for clarity
ax.set_title("AAPL Price with SMA Crossover/Under Strategy")
ax.set_xlabel("Date")
ax.set_ylabel("Price")
ax.legend(loc="best")

# Show the plot
plt.show()
